<think>
Alright, so I've got this problem where I need to convert a JSON object into something called DPS format. Let me try to understand what's being asked here.

First, I'll read through the user's query carefully. They provided a formal description of the DPS structure and an example. The goal is to take a given JSON object and translate it into this specific syntax.

Looking at the formal description:

- Story starts with 'STO' followed by comments if any.
- A Sequence of Actions is a list where each action can lead to more actions.
- Each Action consists of optional Subject, mandatory Action, and optional Object. All are strings.

In the example provided, I see that each line represents an action with subject, action, object. Sometimes the subject or object might be missing in the JSON, so those should be omitted in DPS if not present.

Now, the user's example shows how the conversion works. Each key-value pair in the JSON becomes a line in DPS, but only for the actions. The keys under "actions" are the ones that matter here. So I need to parse each action and its subject and object accordingly.

I also notice that the DPS format doesn't require the story name or any identifiers beyond 'STO' at the beginning. So my focus is solely on converting the actions part of the JSON into the correct syntax.

When processing the JSON, I'll look for the "actions" array. Each element in this array should have a subject, action, and object. If either subject or object is missing, they shouldn't appear in the DPS line.

For example, if an action has only an action string, like {"action": "ran"}, then the DPS line would just be "ran". But looking at the example, it seems that actions usually have a subject and sometimes an object. So I need to make sure to check for their presence.

I should also ensure that strings are correctly formatted, using underscores where necessary, as in the example. The user emphasized matching the strings from JSON exactly, so no changes there except formatting into DPS syntax.

Another point is handling inline comments starting with ';'. But since the provided JSON doesn't have any comments, I might not need to handle those unless the input includes them.

So, putting it all together:

1. Start with 'Sto' followed by a comment if needed (but in this case, no story name was given).
2. Iterate through each action in the JSON's "actions" array.
3. For each action, construct a line that includes subject, action, and object as available.

Wait, actually, looking back at the example provided by the user, I see that they have multiple characters involved, like Eagle_Knight, Jaguar_Knight, etc., each performing actions with objects. So each action is on a separate line in DPS, structured as "Subject Action Object" if both are present, or just "Action" if subject and object are missing.

But wait, the example shows that sometimes only two parts are present: for instance, "Jaguar_Knight Attacked Eagle_Knight". That's subject, action, object. So each line is Subject (if exists) + Action (mandatory) + Object (if exists).

So in code terms, for each action:

- If 'subject' exists and is not empty, include it.
- Include the 'action'.
- If 'object' exists and is not empty, include it.

Thus, each DPS line is constructed by concatenating these parts with spaces.

I need to make sure that if either subject or object is missing in the JSON, they are omitted from the DPS line. So no trailing or leading spaces; just the existing components.

Testing this logic with the example given:

The JSON had actions like:
- {"subject": "Eagle_Knight", "action": "Was_In_Love_With", "object": "Princess"}
Which becomes "Eagle_Knight Was_In_Love_With Princess"

And another action without object or subject, but in this case, all have both. So the example DPS lines are correctly formed.

Another test case: suppose an action is {"action": "Ran"}, then DPS line is "Ran".

If an action has only a subject and action: {"subject": "John", "action": "ran"}, then DPS would be "John ran".

Similarly, if it's just object and action: {"action": "ran", "object": "away"}, the DPS line would be "ran away".

So I need to handle all these cases.

Now, regarding the actual conversion process:

I'll read each JSON action, check for subject and object. For each part present, add them in order: subject, action, object. Each separated by a space, no trailing spaces.

In code, perhaps using Python, I can loop through each action dictionary in the actions list. For each, build the line by checking if 'subject' exists (and is non-empty string), then add it, followed by action, then check if 'object' exists and is non-empty, then add it.

Wait, but what's the exact structure of the JSON? The user provided an example where the actions are key-value pairs under "actions". Each action has subject, action, object. So in code:

json = {
    "story": "...",
    "actions": [
        {"subject": "...", "action": "...", "object": "..."},
        ...
    ]
}

So I need to process each element of the actions array.

Now, considering edge cases: what if subject or object is an empty string? Should those be included? According to the problem statement, if they are missing from JSON, don't include. But in JSON, if a key exists with a null value, should that be treated as missing?

The user's instruction says "if a subject or an object are missing from the JSON object simply do not add it." So perhaps we need to check if the keys exist and have non-null values.

Wait, but in JSON, if a key is present but has a null value, like {"subject": null}, should that be treated as missing? Or only when the key isn't present?

The problem statement says "if a subject or an object are missing from the JSON object." So I think it refers to the keys not being present. So in code, if 'subject' is not a key in the action dictionary, then omit. Similarly for object.

Alternatively, perhaps the user means that if the value is null or empty string, it's considered missing. But the example shows that all actions have both subject and object, so maybe we can assume that each action has subject and object as needed.

But to be precise, in code I should check whether 'subject' exists and is non-empty, same for 'object'. Because if a key exists but its value is an empty string, perhaps it's considered missing. But the problem statement isn't clear on this. Since the example includes all parts when present, I'll assume that only when the keys are absent should they be omitted.

Alternatively, in JSON, sometimes optional fields might not be present at all. So if 'subject' is not a key, then omit. Similarly for object.

Thus, in code, for each action in actions:

line_parts = []

if 'subject' in action and action['subject']:
    line_parts.append(action['subject'])

line_parts.append(action['action'])  # since action is mandatory

if 'object' in action and action['object']:
    line_parts.append(action['object'])

Then, join the parts with spaces.

This would handle cases where subject or object are missing (either key not present or value is empty).

But perhaps it's safer to assume that if the key exists but has a null value, treat as missing. So in code:

for action in actions:
    parts = []
    if 'subject' in action and action['subject'] is not None and action['subject'] != '':
        parts.append(action['subject'])
    parts.append(action['action'])
    if 'object' in action and action['object'] is not None and action['object'] != '':
        parts.append(action['object'])
    dps_line = ' '.join(parts)
    # add to DPS output

This way, even if the key exists but value is empty or null, it's omitted.

Now, considering the example provided by the user:

They have an action with subject and object. So each line includes all three parts.

Another example: suppose an action like {"action": "ran"} → line is "ran".

If action is {"subject": "John", "action": "ran"} → line is "John ran".

If action is {"action": "ran", "object": "away"} → line is "ran away".

Now, putting this into code. Assuming the JSON structure has 'actions' as a list of dictionaries with 'action' being present (since it's mandatory).

So in Python:

dps_output = []
for action in json_data['actions']:
    parts = []
    if 'subject' in action and action['subject'] not in (None, ''):
        parts.append(action['subject'])
    parts.append(action['action'])
    if 'object' in action and action['object'] not in (None, ''):
        parts.append(action['object'])
    dps_line = ' '.join(parts)
    dps_output.append(dps_line)

Then, the DPS lines are collected. Finally, combine them with newlines.

But the user's initial question was just to convert JSON to this format, but didn't provide the exact structure beyond "actions". So perhaps I should ask for more details if necessary, but assuming that it's as described.

So in conclusion, each action is processed into a line with subject (if present), action, object (if present). Each part joined by spaces.
</think>

To convert JSON data containing actions into the specified format, follow these steps:

1. **Extract Actions**: Retrieve the list of actions from the JSON data.
2. **Process Each Action**: For each action:
   - Check if `subject` exists and is non-empty; include it if so.
   - Include the mandatory `action`.
   - Check if `object` exists and is non-empty; include it if so.
3. **Form Lines**: Combine the parts of each action into a string with spaces.
4. **Combine All Lines**: Join all individual lines into a single output, separated by newlines.

Here's how the conversion looks:

**JSON Input Example:**
```json
{
    "actions": [
        {
            "subject": "Eagle",
            "action": "flies",
            "object": "high"
        },
        {
            "action": "runs"
        }
    ]
}
```

**Converted Output:**
```
Eagle flies high
runs
```

This method ensures each action is correctly formatted with optional `subject` and `object`, while always including the mandatory `action`.